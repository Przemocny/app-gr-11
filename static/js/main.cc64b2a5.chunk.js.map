{"version":3,"sources":["stores/async_store.js","stores/ReduxComponent.js","App.js","stores/new_store.js","index.js"],"names":["createSlice","name","initialState","imBusy","imWithError","posts","filteredPosts","actualPostId","postsFilter","errorMsg","reducers","startLoadingPosts","state","action","doneLoadingPosts","payload","failedLoadingPosts","msg","changeFilter","filter","element","includes","actions","reducer","dataFromApi","StateViewer","this","props","setTimeout","memory","console","log","JSON","stringify","onChange","ev","target","value","React","Component","mapDispatchToActions","connect","App","className","style","margin","ReduxComponent","counter","add","subtract","reset","store","configureStore","bigGlobalStore","reducerPosts","render","document","getElementById"],"mappings":"mSAE2BA,YAAY,CACtCC,KAAM,QAENC,aAAc,CACbC,QAAO,EAAOC,aAAY,EAAOC,MAAM,GACvCC,cAAc,GAAIC,aAAa,GAC/BC,YAAY,GAAIC,SAAS,IAG1BC,SAAU,CACTC,kBADS,SACSC,EAAOC,GACxBD,EAAMT,QAAS,GAEhBW,iBAJS,SAIQF,EAAOC,GACvBD,EAAMT,QAAS,EACfS,EAAMP,MAAQQ,EAAOE,QAAQV,OAE9BW,mBARS,SAQUJ,EAAMC,GACxBD,EAAMT,QAAS,EACfS,EAAMR,aAAc,EACpBQ,EAAMH,SAAWI,EAAOE,QAAQE,KAEjCC,aAbS,SAaIN,EAAOC,GACnBD,EAAMJ,YAAcK,EAAOE,QAAQI,OACnCP,EAAMN,cAAgBM,EAAMP,MAAMc,OAAO,SAACC,GAAY,OAAOA,EAAQC,SAASR,EAAOE,QAAQI,cAxBzFG,E,EAAAA,QAiCQC,E,EAjCCA,Q,4NCGhB,IAAMD,EAAU,CAAEX,kBD4BuEW,EAA1EX,kBC5BsBG,iBD4BoDQ,EAAvDR,iBC5BqBE,mBD4BkCM,EAArCN,mBC5BuBE,aD4BcI,EAAjBJ,cCvBlEM,EAAc,CAAEnB,MAAO,CAAC,SAAS,SAAS,WAE1CoB,E,4LAEkB,IAAD,EACmEC,KAAKC,MAA/EhB,EADO,EACPA,kBAAmBG,EADZ,EACYA,iBADZ,EAC8BE,mBAD9B,EACkDE,aAEjEP,IAGAiB,WAAW,WACPd,EAAiBU,IAClB,O,+BAGE,IAAD,EACqFE,KAAKC,MAAvFE,EADH,EACGA,OAAiEX,GADpE,EACWP,kBADX,EAC8BG,iBAD9B,EACgDE,mBADhD,EACoEE,cAExE,OADAY,QAAQC,IAAIF,GACJ,4CACQ,6BACXG,KAAKC,UAAUJ,GAChB,2BAAOK,SAAU,SAACC,GACdjB,EAAa,CAACC,OAAOgB,EAAGC,OAAOC,SAChCA,MAAOR,EAAOrB,mB,GArBH8B,IAAMC,WAsD1BC,E,qVAAoB,IACnBlB,GAIQmB,cAZS,SAAC7B,GACrB,MAAO,CACHiB,OAAOjB,EAAMP,QAUmBmC,EAAzBC,CAA+ChB,GCjD/CiB,G,oOARb,OACC,yBAAKC,UAAU,MAAMC,MAAO,CAAEC,OAAQ,KACrC,kBAACC,EAAD,W,GANcR,IAAMC,Y,ECRGvC,YAAY,CACtCC,KAAM,UAENC,aAAc,CAAE6C,QAAS,EAAG5C,QAAO,GAEnCO,SAAU,CACTsC,IADS,SACLpC,EAAOC,GACVD,EAAMmC,SAAWlC,EAAOE,SAEzBkC,SAJS,SAIArC,EAAOC,GACfD,EAAMmC,SAAWlC,EAAOE,SAEzBmC,MAPS,SAOHtC,EAAOC,GACZD,EAAMmC,QAAU,MAbZzB,E,EAAAA,QAASC,E,EAAAA,QAoBDA,GAFyBD,EAAzB0B,IAAyB1B,EAApB2B,SAAoB3B,EAAV4B,MAEf3B,GCVT4B,EAAQC,YAAe,CACzB7B,QAAS,CAAE8B,eAAgB9B,EACvBlB,MAAMiD,KAmBdC,iBACI,kBAPa,WACb,OAAQ,kBAAC,IAAD,CAAUJ,MAAOA,GACjB,kBAAC,EAAD,QAKR,MACAK,SAASC,eAAe,W","file":"static/js/main.cc64b2a5.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst {actions, reducer} = createSlice({\n\tname: 'posts',\n\t\n\tinitialState: { \n\t\timBusy:false, imWithError:false, posts:[], \n\t\tfilteredPosts:[], actualPostId:'', \n\t\tpostsFilter:'', errorMsg:'' \n\t},\n\n\treducers: {\n\t\tstartLoadingPosts(state, action){\n\t\t\tstate.imBusy = true\n\t\t},\n\t\tdoneLoadingPosts(state, action){\n\t\t\tstate.imBusy = false\n\t\t\tstate.posts = action.payload.posts\n\t\t},\n\t\tfailedLoadingPosts(state,action){\n\t\t\tstate.imBusy = false\n\t\t\tstate.imWithError = true\n\t\t\tstate.errorMsg = action.payload.msg\n\t\t},\n\t\tchangeFilter(state, action){\n\t\t\tstate.postsFilter = action.payload.filter\n\t\t\tstate.filteredPosts = state.posts.filter((element)=>{ return element.includes(action.payload.filter)})\n\t\t}\n\n\t}\n\n})\n\nexport const { startLoadingPosts, doneLoadingPosts, failedLoadingPosts, changeFilter } = actions\n\nexport default reducer\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n// new way\nimport { startLoadingPosts, doneLoadingPosts, failedLoadingPosts, changeFilter  } from './async_store';\nconst actions = { startLoadingPosts, doneLoadingPosts, failedLoadingPosts, changeFilter  }\n\n// // old way\n// import { actions } from './old_store';\n\nconst dataFromApi = { posts: ['tytul1','tytul2','tytul3'] }\n\nclass StateViewer extends React.Component{\n\n    componentDidMount(){\n        const { startLoadingPosts, doneLoadingPosts, failedLoadingPosts, changeFilter } = this.props\n\n        startLoadingPosts()\n\n        // zapytanie axiosa\n        setTimeout(()=>{\n            doneLoadingPosts(dataFromApi)\n        }, 3000)\n    }\n\n    render(){\n        const {memory, startLoadingPosts, doneLoadingPosts, failedLoadingPosts, changeFilter } = this.props\n        console.log(memory)\n        return (<div>\n            StateViewer <br/>\n            {JSON.stringify(memory)}\n            <input onChange={(ev)=>{\n                changeFilter({filter:ev.target.value})\n            }} value={memory.postsFilter}/>\n            </div>)\n    }\n}\n\n// const StateViewer = (props)=>{\n//     console.log(props)\n//     const {memory, add, subtract, reset} = props\n//     return (<div>\n//         StateViewer <br/>\n//         {JSON.stringify(memory)}\n//             <div>\n//                 <button onClick={()=>{\n//                     add(1)\n//                 }}>+</button>\n//                 <button onClick={()=>{\n//                     subtract(1)\n//                 }}>-</button>\n//                 <button onClick={()=>{reset()}}>reset</button>\n\n//             </div>\n//         </div>)\n// }\n\n\n// w jaki sposób i jakie dane mają trafić do propsów konkretnego komponentu\nconst mapStateToProps = (state) => {\n    return { \n        memory:state.posts\n    }\n}\n\n// jakie akcje z danego stora mają być przekazane do propsów, \"oraz mają działać\"\nconst mapDispatchToActions = {\n    ...actions\n}\n\n// connect - funkcja która łączy komponent ze storem reduxa wg zakodowanego schematu\nexport default connect(mapStateToProps, mapDispatchToActions)(StateViewer)","import React from 'react'\nimport ReduxComponent from './stores/ReduxComponent'\nimport './App.css'\n\n\n// redux - przypomnienie\n// prop-types - upewnianie się\n// deploy na gh-pages - https://typeofweb.com/react-js-na-github-pages-dzieki-create-react-app/\n\n\nclass App extends React.Component {\n\tcomponentDidMount() {}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App' style={{ margin: 30 }}>\n\t\t\t\t<ReduxComponent/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst {actions, reducer} = createSlice({\n\tname: 'counter',\n\t\n\tinitialState: { counter: 0, imBusy:false },\n\n\treducers: {\n\t\tadd(state, action) {\n\t\t\tstate.counter += action.payload\n\t\t},\n\t\tsubtract(state, action) {\n\t\t\tstate.counter -= action.payload\n\t\t},\n\t\treset(state, action) {\n\t\t\tstate.counter = 0\n\t\t}\n\t}\n})\n\nexport const { add, subtract, reset } = actions\n\nexport default reducer\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\n\n// new way\nimport { configureStore } from '@reduxjs/toolkit'\nimport reducer from './stores/new_store';\nimport reducerPosts from './stores/async_store';\n\nconst store = configureStore({\n    reducer: { bigGlobalStore: reducer, \n        posts:reducerPosts }\n})\n\n// old way\n// import { countReducer } from './stores/old_store';\n// import { combineReducers, createStore } from 'redux';\n\n// const mainReducer = combineReducers({\n//     bigGlobalStore: countReducer\n// })\n\n// const store = createStore(mainReducer)\n\nconst ReduxApp = ()=>{\n    return (<Provider store={store}>\n            <App/>\n        </Provider>)\n}\n\nrender(\n    <ReduxApp/>,\n    document.getElementById('root')\n)\n\n"],"sourceRoot":""}